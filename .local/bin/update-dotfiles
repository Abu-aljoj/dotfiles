#!/usr/bin/env zsh
set -euo pipefail

# === CONFIGURATION ===
REPO="${DOTFILES_REPO:-$HOME/dotfiles}"
CONFIG_DIRS=(fastfetch kitty hypr uwsm hyprpanel rofi nvim btop Kvantum)
LOCAL_DIRS=(share/themes share/icons bin)

DRY_RUN=false
VERBOSE=false

# === COLORS ===
GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
RED=$'\033[0;31m'
RESET=$'\033[0m'

# === LOGGING ===
log() { echo "${GREEN}[✔]${RESET} $1"; }
warn() { echo "${YELLOW}[!]${RESET} $1"; }
error() { echo "${RED}[✖]${RESET} $1" >&2; }

# === DRY RUN HANDLER ===
dry_exec() {
  if $DRY_RUN; then
    echo "[DRY RUN] $*"
  else
    eval "$@"
  fi
}

# === SYNC FUNCTION ===
sync_folder() {
  local src="$1"
  local dest="$2"

  if [[ -d "$src" ]]; then
    local cmd="rsync -a --delete ${VERBOSE:+--progress -v} \"$src/\" \"$dest/\""
    dry_exec "$cmd"
    log "Synced: ${src/#$HOME/~} → ${dest/#$HOME/~}"
  else
    warn "Missing: $src"
  fi
}

# === ARGUMENT PARSING ===
for arg in "$@"; do
  case "$arg" in
  --dry-run) DRY_RUN=true ;;
  --verbose) VERBOSE=true ;;
  *)
    error "Unknown argument: $arg"
    exit 1
    ;;
  esac
done

# === CHECK REPO ===
[[ -d "$REPO" ]] || {
  error "Dotfiles repo not found at $REPO"
  exit 1
}

# === SYNC CONFIG FILES ===
log "[1/4] Syncing ~/.config folders..."
mkdir -p "$REPO/.config"
for dir in $CONFIG_DIRS; do
  sync_folder "$HOME/.config/$dir" "$REPO/.config/$dir"
done

# === SYNC LOCAL FILES ===
log "[2/4] Syncing ~/.local folders..."
mkdir -p "$REPO/.local"
for dir in $LOCAL_DIRS; do
  sync_folder "$HOME/.local/$dir" "$REPO/.local/$dir"
done

# === GIT COMMIT ===
log "[3/4] Git add and commit"
cd "$REPO"
dry_exec "git add ."

# If dry run, skip commit
if $DRY_RUN; then
  warn "Dry run mode: skipping commit & push."
  exit 0
fi

echo -n "Enter commit message (default: auto-generated): "
read -r COMMIT_MSG
[[ -z "$COMMIT_MSG" ]] && COMMIT_MSG="Update dotfiles: $(date '+%Y-%m-%d %H:%M:%S')"

git commit -m "$COMMIT_MSG" && log "Committed: $COMMIT_MSG"
git push && log "[4/4] Pushed to origin"

log "✅ Dotfiles updated successfully"
